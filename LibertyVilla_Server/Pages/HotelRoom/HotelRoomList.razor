@page "/hotel-room"
@using Business.Repository.IRepository;
@using LibertyVilla_Server.Service.IService;
@using Models;
@using System.Web;
@using System.Security.Claims;
@inject IHotelRoomRepository HotelRoomRepository;
@inject IJSRuntime JSRunTime;
@inject IFileUpload FileUpload
@*@inject AuthenticationStateProvider AuthenticationStateProvider*@
@inject NavigationManager NavigationManager;
@*@attribute [Authorize(Roles = $"SuperAdmin")]*@

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info"> Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add Hotel Room</NavLink>
    </div>

</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>SqFt</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if(HotelRooms.Any())
                {
                    foreach(var room in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("c")</td>
                            <td>@room.Sqft</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary"> Edit </NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(room.Id)"> Delete </button>

                            </td>
                        </tr>
                        
                    }

                }
                else
                {
                    <tr colspan="5">
                        <td>No records found</td>
                     </tr>
                }

            </tbody>
        </table>
    </div>
</div>
@*accessing claims*@
@*<p>Welcome, @UserClaims.FindFirstValue(ClaimTypes.Name)!</p>
<p>Email: @UserClaims.FindFirstValue(ClaimTypes.Email)</p>
<p>Role: @UserClaims.FindFirstValue(ClaimTypes.Role)</p>*@
 <DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>
@code {
    private IEnumerable<HotelRoomDto> HotelRooms { get; set; } = new List<HotelRoomDto>();
    public int? DeleteRoomId { get; set; } = null;
    public bool IsProcessing { get; set; } = false;
    //private ClaimsPrincipal UserClaims { get; set; }
    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRoom();

        //for accessing claims
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //UserClaims = authState.User;
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JSRunTime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if(isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDto hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach(var image in hotelRoom.HotelRoomImages)
            {
                var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                FileUpload.DeleteFile(imageName);
            }
            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JSRunTime.ToastrSuccess("Hotel room was deleted successfully");
            HotelRooms = await HotelRoomRepository.GetAllHotelRoom();
        }
        await JSRunTime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }

}
